// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/calendar.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CalendarService_CreateCalendarItem_FullMethodName = "/superjcd.calendarservice.v1.CalendarService/CreateCalendarItem"
	CalendarService_ListCalendarItems_FullMethodName  = "/superjcd.calendarservice.v1.CalendarService/ListCalendarItems"
	CalendarService_UpdateCalendarItem_FullMethodName = "/superjcd.calendarservice.v1.CalendarService/UpdateCalendarItem"
)

// CalendarServiceClient is the client API for CalendarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarServiceClient interface {
	// create
	CreateCalendarItem(ctx context.Context, in *CreateCalendarItemRequest, opts ...grpc.CallOption) (*CreateCalendarItemResponse, error)
	// list
	ListCalendarItems(ctx context.Context, in *ListCalendarItemsRequest, opts ...grpc.CallOption) (*ListCalendarItemsResponse, error)
	// update
	UpdateCalendarItem(ctx context.Context, in *UpdateCalendarItemRequest, opts ...grpc.CallOption) (*UpdateCalendarItemResponse, error)
}

type calendarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarServiceClient(cc grpc.ClientConnInterface) CalendarServiceClient {
	return &calendarServiceClient{cc}
}

func (c *calendarServiceClient) CreateCalendarItem(ctx context.Context, in *CreateCalendarItemRequest, opts ...grpc.CallOption) (*CreateCalendarItemResponse, error) {
	out := new(CreateCalendarItemResponse)
	err := c.cc.Invoke(ctx, CalendarService_CreateCalendarItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) ListCalendarItems(ctx context.Context, in *ListCalendarItemsRequest, opts ...grpc.CallOption) (*ListCalendarItemsResponse, error) {
	out := new(ListCalendarItemsResponse)
	err := c.cc.Invoke(ctx, CalendarService_ListCalendarItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) UpdateCalendarItem(ctx context.Context, in *UpdateCalendarItemRequest, opts ...grpc.CallOption) (*UpdateCalendarItemResponse, error) {
	out := new(UpdateCalendarItemResponse)
	err := c.cc.Invoke(ctx, CalendarService_UpdateCalendarItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServiceServer is the server API for CalendarService service.
// All implementations must embed UnimplementedCalendarServiceServer
// for forward compatibility
type CalendarServiceServer interface {
	// create
	CreateCalendarItem(context.Context, *CreateCalendarItemRequest) (*CreateCalendarItemResponse, error)
	// list
	ListCalendarItems(context.Context, *ListCalendarItemsRequest) (*ListCalendarItemsResponse, error)
	// update
	UpdateCalendarItem(context.Context, *UpdateCalendarItemRequest) (*UpdateCalendarItemResponse, error)
	mustEmbedUnimplementedCalendarServiceServer()
}

// UnimplementedCalendarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarServiceServer struct {
}

func (UnimplementedCalendarServiceServer) CreateCalendarItem(context.Context, *CreateCalendarItemRequest) (*CreateCalendarItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendarItem not implemented")
}
func (UnimplementedCalendarServiceServer) ListCalendarItems(context.Context, *ListCalendarItemsRequest) (*ListCalendarItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalendarItems not implemented")
}
func (UnimplementedCalendarServiceServer) UpdateCalendarItem(context.Context, *UpdateCalendarItemRequest) (*UpdateCalendarItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalendarItem not implemented")
}
func (UnimplementedCalendarServiceServer) mustEmbedUnimplementedCalendarServiceServer() {}

// UnsafeCalendarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServiceServer will
// result in compilation errors.
type UnsafeCalendarServiceServer interface {
	mustEmbedUnimplementedCalendarServiceServer()
}

func RegisterCalendarServiceServer(s grpc.ServiceRegistrar, srv CalendarServiceServer) {
	s.RegisterService(&CalendarService_ServiceDesc, srv)
}

func _CalendarService_CreateCalendarItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateCalendarItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_CreateCalendarItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateCalendarItem(ctx, req.(*CreateCalendarItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_ListCalendarItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalendarItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).ListCalendarItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_ListCalendarItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).ListCalendarItems(ctx, req.(*ListCalendarItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_UpdateCalendarItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalendarItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).UpdateCalendarItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_UpdateCalendarItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).UpdateCalendarItem(ctx, req.(*UpdateCalendarItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalendarService_ServiceDesc is the grpc.ServiceDesc for CalendarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalendarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superjcd.calendarservice.v1.CalendarService",
	HandlerType: (*CalendarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCalendarItem",
			Handler:    _CalendarService_CreateCalendarItem_Handler,
		},
		{
			MethodName: "ListCalendarItems",
			Handler:    _CalendarService_ListCalendarItems_Handler,
		},
		{
			MethodName: "UpdateCalendarItem",
			Handler:    _CalendarService_UpdateCalendarItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calendar.proto",
}
